Program to find the Nth term of the Fibonacci series:

cpp
Copy code
#include <iostream>
using namespace std;

int fibonacci(int n) {
    if (n <= 1)
        return n;
    return fibonacci(n - 1) + fibonacci(n - 2);
}

int main() {
    int n;
    cout << "Enter the term number: ";
    cin >> n;
    cout << "The " << n << "th term of the Fibonacci series is: " << fibonacci(n);
    return 0;
}
Program to print the first N terms of the Fibonacci series:

cpp
Copy code
#include <iostream>
using namespace std;

void printFibonacci(int n) {
    int t1 = 0, t2 = 1, nextTerm = 0;

    for (int i = 1; i <= n; ++i) {
        if(i == 1) {
            cout << t1 << " ";
            continue;
        }
        if(i == 2) {
            cout << t2 << " ";
            continue;
        }
        nextTerm = t1 + t2;
        t1 = t2;
        t2 = nextTerm;
        
        cout << nextTerm << " ";
    }
}

int main() {
    int n;
    cout << "Enter the number of terms: ";
    cin >> n;
    cout << "First " << n << " terms of Fibonacci series: ";
    printFibonacci(n);
    return 0;
}
Program to check whether a given number is in the Fibonacci series or not:

cpp
Copy code
#include <iostream>
using namespace std;

bool isFibonacci(int n) {
    int t1 = 0, t2 = 1, nextTerm = 0;

    while(nextTerm <= n) {
        if(nextTerm == n)
            return true;
        nextTerm = t1 + t2;
        t1 = t2;
        t2 = nextTerm;
    }
    return false;
}

int main() {
    int n;
    cout << "Enter a number: ";
    cin >> n;

    if(isFibonacci(n))
        cout << n << " is a Fibonacci number.";
    else
        cout << n << " is not a Fibonacci number.";
    return 0;
}
Program to calculate HCF of two numbers:

cpp
Copy code
#include <iostream>
using namespace std;

int gcd(int a, int b) {
    if (b == 0)
        return a;
    return gcd(b, a % b);
}

int main() {
    int num1, num2;
    cout << "Enter two numbers: ";
    cin >> num1 >> num2;

    cout << "HCF of " << num1 << " and " << num2 << " is: " << gcd(num1, num2);
    return 0;
}
Program to check whether two given numbers are co-prime numbers or not:

cpp
Copy code
#include <iostream>
using namespace std;

int gcd(int a, int b) {
    if (b == 0)
        return a;
    return gcd(b, a % b);
}

bool areCoPrime(int a, int b) {
    return (gcd(a, b) == 1);
}

int main() {
    int num1, num2;
    cout << "Enter two numbers: ";
    cin >> num1 >> num2;

    if(areCoPrime(num1, num2))
        cout << num1 << " and " << num2 << " are co-prime numbers.";
    else
        cout << num1 << " and " << num2 << " are not co-prime numbers.";
    return 0;
}
Program to print all prime numbers under 100:

cpp
Copy code
#include <iostream>
using namespace std;

bool isPrime(int n) {
    if (n <= 1)
        return false;
    for (int i = 2; i <= n / 2; i++) {
        if (n % i == 0)
            return false;
    }
    return true;
}

int main() {
    cout << "Prime numbers under 100: ";
    for (int i = 2; i < 100; i++) {
        if (isPrime(i))
            cout << i << " ";
    }
    return 0;
}
Program to print all prime numbers between two given numbers:

cpp
Copy code
#include <iostream>
using namespace std;

bool isPrime(int n) {
    if (n <= 1)
        return false;
    for (int i = 2; i <= n / 2; i++) {
        if (n % i == 0)
            return false;
    }
    return true;
}

int main() {
    int start, end;
    cout << "Enter two numbers (intervals): ";
    cin >> start >> end;

    cout << "Prime numbers between " << start << " and " << end << ": ";
    for (int i = start; i <= end; i++) {
        if (isPrime(i))
            cout << i << " ";
    }
    return 0;
}
Program to find the next prime number of a given number:

cpp
Copy code
#include <iostream>
using namespace std;

bool isPrime(int n) {
    if (n <= 1)
        return false;
    for (int i = 2; i <= n / 2; i++) {
        if (n % i == 0)
            return false;
    }
    return true;
}

int nextPrime(int n) {
    int next = n + 1;
    while (!isPrime(next)) {
        next++;
    }
    return next;
}

int main() {
    int num;
    cout << "Enter a number: ";
    cin >> num;

    cout << "Next prime number after " << num << " is: " << nextPrime(num);
    return 0;
}
Program to check whether a given number is an Armstrong number or not:

cpp
Copy code
#include <iostream>
using namespace std;

bool isArmstrong(int n) {
    int original = n, sum = 0, digits = 0;

    while (original != 0) {
        digits++;
        original /= 10;
    }

    original = n;
    while (original != 0) {
        int rem = original % 10;
        sum += pow(rem, digits);
        original /= 10;
    }

    return (sum == n);
}

int main() {
    int num;
    cout << "Enter a number: ";
    cin >> num;

    if (isArmstrong(num))
        cout << num << " is an Armstrong number.";
    else
        cout << num << " is not an Armstrong number.";
    return 0;
}
Program to print all Armstrong numbers under 1000:

cpp
Copy code
#include <iostream>
using namespace std;

bool isArmstrong(int n) {
    int original = n, sum = 0, digits = 0;

    while (original != 0) {
        digits++;
        original /= 10;
    }

    original = n;
    while (original != 0) {
        int rem = original % 10;
        sum += pow(rem, digits);
        original /= 10;
    }

    return (sum == n);
}

int main() {
    cout << "Armstrong numbers under 1000: ";
    for (int i = 1; i < 1000; i++) {
        if (isArmstrong(i))
            cout << i << " ";
    }
    return 0;
}
Program to find the position of the first 1 in LSB:

cpp
Copy code
#include <iostream>
using namespace std;

int positionOfFirst1(int n) {
    return log2(n & -n) + 1;
}

int main() {
    int num;
    cout << "Enter a number: ";
    cin >> num;

    cout << "The position of first 1 in LSB is: " << positionOfFirst1(num);
    return 0;
}









ChatGPT can make mistakes. Check important info.
